
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUIVALENCEleftIMPLIESleftUNIONleftSEQleftSTARleftTESTleftORleftANDrightDIAMONDLSEPARATORBOXLSEPARATORleftDIAMONDRSEPARATORBOXRSEPARATORrightNOTAND ATOM BOXLSEPARATOR BOXRSEPARATOR DIAMONDLSEPARATOR DIAMONDRSEPARATOR END EQUIVALENCE FALSE FF IMPLIES LAST LPAREN NOT OR RPAREN SEQ STAR TEST TRUE TT UNIONtemp_formula : temp_formula EQUIVALENCE temp_formula\n                        | temp_formula IMPLIES temp_formula\n                        | temp_formula OR temp_formula\n                        | temp_formula AND temp_formula\n                        | BOXLSEPARATOR path BOXRSEPARATOR temp_formula\n                        | DIAMONDLSEPARATOR path DIAMONDRSEPARATOR temp_formula\n                        | NOT temp_formula\n                        | TT\n                        | FF\n                        | END\n                        | LASTpath : path UNION path\n                | path SEQ path\n                | path STAR\n                | temp_formula TEST\n                | propositionalpropositional : propositional EQUIVALENCE propositional\n                         | propositional IMPLIES propositional\n                         | propositional OR propositional\n                         | propositional AND propositional\n                         | NOT propositional\n                         | FALSE\n                         | TRUE\n                         | ATOMtemp_formula : LPAREN temp_formula RPAREN\n        path            : LPAREN path RPAREN\n        propositional   : LPAREN propositional RPAREN\n        '
    
_lr_action_items = {'BOXLSEPARATOR':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,42,43,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'DIAMONDLSEPARATOR':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,42,43,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'NOT':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,34,35,36,37,42,43,49,50,],[4,18,18,4,4,4,4,4,4,18,18,4,18,18,49,49,49,49,18,4,49,49,]),'TT':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,42,43,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'FF':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,42,43,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'END':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,42,43,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'LAST':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,42,43,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'LPAREN':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,34,35,36,37,42,43,49,50,],[9,17,17,9,9,9,9,9,9,17,42,9,17,17,50,50,50,50,42,9,50,50,]),'$end':([1,5,6,7,8,23,25,26,27,28,44,45,57,],[0,-8,-9,-10,-11,-7,-1,-2,-3,-4,-25,-5,-6,]),'EQUIVALENCE':([1,5,6,7,8,15,16,19,20,21,23,24,25,26,27,28,39,40,41,44,45,48,51,52,53,55,56,57,],[10,-8,-9,-10,-11,10,34,-22,-23,-24,-7,10,-1,-2,-3,-4,10,34,-21,-25,-5,-17,-18,-19,-20,-27,34,-6,]),'IMPLIES':([1,5,6,7,8,15,16,19,20,21,23,24,25,26,27,28,39,40,41,44,45,48,51,52,53,55,56,57,],[11,-8,-9,-10,-11,11,35,-22,-23,-24,-7,11,11,-2,-3,-4,11,35,-21,-25,-5,35,-18,-19,-20,-27,35,-6,]),'OR':([1,5,6,7,8,15,16,19,20,21,23,24,25,26,27,28,39,40,41,44,45,48,51,52,53,55,56,57,],[12,-8,-9,-10,-11,12,36,-22,-23,-24,-7,12,12,12,-3,-4,12,36,-21,-25,-5,36,36,-19,-20,-27,36,-6,]),'AND':([1,5,6,7,8,15,16,19,20,21,23,24,25,26,27,28,39,40,41,44,45,48,51,52,53,55,56,57,],[13,-8,-9,-10,-11,13,37,-22,-23,-24,-7,13,13,13,13,-4,13,37,-21,-25,-5,37,37,37,-20,-27,37,-6,]),'FALSE':([2,3,17,18,30,31,34,35,36,37,42,49,50,],[19,19,19,19,19,19,19,19,19,19,19,19,19,]),'TRUE':([2,3,17,18,30,31,34,35,36,37,42,49,50,],[20,20,20,20,20,20,20,20,20,20,20,20,20,]),'ATOM':([2,3,17,18,30,31,34,35,36,37,42,49,50,],[21,21,21,21,21,21,21,21,21,21,21,21,21,]),'TEST':([5,6,7,8,15,23,25,26,27,28,39,44,45,57,],[-8,-9,-10,-11,33,-7,-1,-2,-3,-4,33,-25,-5,-6,]),'RPAREN':([5,6,7,8,16,19,20,21,23,24,25,26,27,28,32,33,38,39,40,41,44,45,46,47,48,51,52,53,54,55,56,57,],[-8,-9,-10,-11,-16,-22,-23,-24,-7,44,-1,-2,-3,-4,-14,-15,54,44,55,-21,-25,-5,-12,-13,-17,-18,-19,-20,-26,-27,55,-6,]),'BOXRSEPARATOR':([14,16,19,20,21,32,33,41,46,47,48,51,52,53,54,55,],[29,-16,-22,-23,-24,-14,-15,-21,-12,-13,-17,-18,-19,-20,-26,-27,]),'UNION':([14,16,19,20,21,22,32,33,38,40,41,46,47,48,51,52,53,54,55,],[30,-16,-22,-23,-24,30,-14,-15,30,-16,-21,-12,-13,-17,-18,-19,-20,-26,-27,]),'SEQ':([14,16,19,20,21,22,32,33,38,40,41,46,47,48,51,52,53,54,55,],[31,-16,-22,-23,-24,31,-14,-15,31,-16,-21,31,-13,-17,-18,-19,-20,-26,-27,]),'STAR':([14,16,19,20,21,22,32,33,38,40,41,46,47,48,51,52,53,54,55,],[32,-16,-22,-23,-24,32,-14,-15,32,-16,-21,32,32,-17,-18,-19,-20,-26,-27,]),'DIAMONDRSEPARATOR':([16,19,20,21,22,32,33,41,46,47,48,51,52,53,54,55,],[-16,-22,-23,-24,43,-14,-15,-21,-12,-13,-17,-18,-19,-20,-26,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'temp_formula':([0,2,3,4,9,10,11,12,13,17,18,29,30,31,42,43,],[1,15,15,23,24,25,26,27,28,39,23,45,15,15,24,57,]),'path':([2,3,17,30,31,],[14,22,38,46,47,]),'propositional':([2,3,17,18,30,31,34,35,36,37,42,49,50,],[16,16,40,41,16,16,48,51,52,53,56,41,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> temp_formula","S'",1,None,None,None),
  ('temp_formula -> temp_formula EQUIVALENCE temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',93),
  ('temp_formula -> temp_formula IMPLIES temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',94),
  ('temp_formula -> temp_formula OR temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',95),
  ('temp_formula -> temp_formula AND temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',96),
  ('temp_formula -> BOXLSEPARATOR path BOXRSEPARATOR temp_formula','temp_formula',4,'p_temp_formula','ldlf.py',97),
  ('temp_formula -> DIAMONDLSEPARATOR path DIAMONDRSEPARATOR temp_formula','temp_formula',4,'p_temp_formula','ldlf.py',98),
  ('temp_formula -> NOT temp_formula','temp_formula',2,'p_temp_formula','ldlf.py',99),
  ('temp_formula -> TT','temp_formula',1,'p_temp_formula','ldlf.py',100),
  ('temp_formula -> FF','temp_formula',1,'p_temp_formula','ldlf.py',101),
  ('temp_formula -> END','temp_formula',1,'p_temp_formula','ldlf.py',102),
  ('temp_formula -> LAST','temp_formula',1,'p_temp_formula','ldlf.py',103),
  ('path -> path UNION path','path',3,'p_path','ldlf.py',144),
  ('path -> path SEQ path','path',3,'p_path','ldlf.py',145),
  ('path -> path STAR','path',2,'p_path','ldlf.py',146),
  ('path -> temp_formula TEST','path',2,'p_path','ldlf.py',147),
  ('path -> propositional','path',1,'p_path','ldlf.py',148),
  ('propositional -> propositional EQUIVALENCE propositional','propositional',3,'p_propositional','ldlf.py',171),
  ('propositional -> propositional IMPLIES propositional','propositional',3,'p_propositional','ldlf.py',172),
  ('propositional -> propositional OR propositional','propositional',3,'p_propositional','ldlf.py',173),
  ('propositional -> propositional AND propositional','propositional',3,'p_propositional','ldlf.py',174),
  ('propositional -> NOT propositional','propositional',2,'p_propositional','ldlf.py',175),
  ('propositional -> FALSE','propositional',1,'p_propositional','ldlf.py',176),
  ('propositional -> TRUE','propositional',1,'p_propositional','ldlf.py',177),
  ('propositional -> ATOM','propositional',1,'p_propositional','ldlf.py',178),
  ('temp_formula -> LPAREN temp_formula RPAREN','temp_formula',3,'p_expr_paren','ldlf.py',205),
  ('path -> LPAREN path RPAREN','path',3,'p_expr_paren','ldlf.py',206),
  ('propositional -> LPAREN propositional RPAREN','propositional',3,'p_expr_paren','ldlf.py',207),
]
